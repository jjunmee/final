<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
	
	<!-- 웹소켓 -->
	<bean id="echoHandler" class="com.jhta.netflix.chat.util.EchoHandler" />
	<websocket:handlers>
		<websocket:mapping handler="echoHandler" path="/echo"/>
		<websocket:handshake-interceptors>
			<bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		</websocket:handshake-interceptors>
		<websocket:sockjs/>
	</websocket:handlers>
	
	<!-- <context:property-placeholder location="*.properties"/> -->
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="/WEB-INF/*.properties"/>
	</bean>	
   
   <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
   		<property name="driverClassName" value="${driver}"/>
   		<property name="url" value="${url}"/>
   		<property name="username" value="${user}"/>
   		<property name="password" value="${password}"/>
   </bean> 
   <!-- 
   <bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
      <constructor-arg ref="dataSourceSpied" />
      <property name="logFormatter">
         <bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
            <property name="loggingType" value="MULTI_LINE" />
            <property name="sqlPrefix" value="SQL         :  " />
         </bean>
      </property>
   </bean>
    -->
   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   		<property name="dataSource" ref="dataSource"/>
   		<property name="mapperLocations" value="classpath*:mapper/*.xml"/>
   		<property name="configLocation"
   				value="classpath:mybatis/mybatis-config.xml"/>
   				
   </bean>
   <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
   		<constructor-arg index="0" ref="sqlSessionFactory"/>
   </bean>  	
	
   <!-- Google 소셜 로그인 계정 설정 -->
	<bean id = "googleConnectionFactory" class="org.springframework.social.google.connect.GoogleConnectionFactory">
	<constructor-arg value="${google_key_id}"/>
	<constructor-arg value="${google_key_secret}"/>    
	</bean>
	<bean id = "googleOAuth2Parameters" class="org.springframework.social.oauth2.OAuth2Parameters">
	<property name="scope" value="https://www.googleapis.com/auth/plus.login https://www.googleapis.com/auth/userinfo.email"></property>
	<property name="redirectUri" value="${google_redirect}"/>
	</bean>
	<!--  Naver 소셜 로그인 계정 설정 -->
	<bean id = "naverConnectionFactory" class="com.jhta.netflix.user.naver.NaverLoginBo">
		<property name="CLIENT_ID" value="${naver_key_id}"/>
		<property name="CLIENT_SECRET" value="${naver_key_secret}"/>   
		<property name="REDIRECT_URI" value="${naver_redirect}"/> 
		<property name="SESSION_STATE" value="oauth_state"/> 
		<property name="PROFILE_API_URL" value="https://openapi.naver.com/v1/nid/me"/> 
	</bean>
	
	<!-- 자바메일설정하기 -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${email.host}"/>
		<property name="port" value="${email.port}"/>
		<property name="defaultEncoding" value="euc-kr"/>
		<property name="username" value="${email.userId}"/>
		<property name="password" value="${email.userPw}"/>
		<property name="javaMailProperties">
			<props>
				<!-- 인증받아서 이메일보내기 -->
				<prop key="mail.smtp.auth">${email.auth}</prop>
				<!-- smtp통신을 ssl암호화해서 보니기 -->
				<prop key="mail.smtp.starttls.enable">${email.enable}</prop>
				<!-- <prop key="mail.transport.protocol">${email.protocol}</prop> -->
               	<prop key="mail.debug">true</prop>
               	<prop key="mail.smtps.ssl.checkserveridentity">true</prop>
				<prop key="mail.smtps.ssl.trust">*</prop>
			</props>
		</property>
	</bean>
	
	<!-- FTP -->
	<bean id="ftpInformation" class="com.jhta.netflix.lib.FTP">
		<property name="url" value="${ftp.url}"/>
		<property name="id" value="${ftp.id}"/>
		<property name="pwd" value="${ftp.pwd}"/>
		<property name="port" value="${ftp.port}"/>
	</bean>
	
	<bean id="surScheduler" class="com.jhta.netflix.survey.controller.SurveyScheduler"/>
		<task:scheduler id="surveyScheduler" pool-size="10"/>
		<task:executor id="schedulerExecutor" pool-size="10"/>
		<task:annotation-driven executor="schedulerExecutor" scheduler="surveyScheduler"/>
	
	
   <context:component-scan base-package="com.jhta.netflix">
   		<context:exclude-filter type="annotation" 
   		        expression="org.springframework.stereotype.Controller"/>
   </context:component-scan>
</beans>